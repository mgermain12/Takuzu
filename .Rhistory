}
return (list(g=somme_gain/10000,r=x))
}
gain2 = J2(x0,N)$g
R2 = J2(x0,N)$r
gain_min2 = gain2 + 1.96*sqrt(var(R2)/10000)
gain_max2 = gain2 - 1.96*sqrt(var(R2)/10000)
r3 <- function(x, a, D) {
return (-alpha*a - gamma*max(0, D-x-a))
}
trajectoire_gain3 <- function(x0,N) {
Y <- matrix(c(0,0),nrow=N+1, ncol=2)
Y[1,] <- c(x0,0)
D = rpois(N,3)
for(n in 1:N) {
a <- f3(Y[n])
Y[n+1,1] <- max(0,Y[n] + a - D[n])
Y[n,2] <- r3(Y[n,1],a, D[n])
}
return (Y)
}
simulation_traj3 = list()
for (n in 1:10000) {
simulation_traj3[[n]] = trajectoire_gain3(x0,N)[,2]
}
f3 = function(x) {
if (x<M){
return (1)
}
else {
return (0)
}
}
trajectoire3 = function(x0,N) {
X = numeric(N+1)
X[1] <- x0
D <- rpois(N,3)
for(n in 1:N){
a <- f3(X[n])
X[n+1] = max(0, X[n] + a - D[n])
}
return (X)
}
traj1_3 = trajectoire3(x0,N)
traj2_3 = trajectoire3(x0,N)
traj3_3 = trajectoire3(x0,N)
traj4_3 = trajectoire3(x0,N)
x = seq(1,N+1, by=1)
plot(x, traj1_3, col = "red", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj1_3, pch =16)
plot(x, traj2_3, col = "blue", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj2_3, pch =16)
plot(x, traj3_3, col = "green", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj3_3, pch =16)
plot(x, traj4_3, col = "magenta", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj4_3, pch =16)
r3 <- function(x, a, D) {
return (-alpha*a - gamma*max(0, D-x-a))
}
trajectoire_gain3 <- function(x0,N) {
Y <- matrix(c(0,0),nrow=N+1, ncol=2)
Y[1,] <- c(x0,0)
D = rpois(N,3)
for(n in 1:N) {
a <- f3(Y[n])
Y[n+1,1] <- max(0,Y[n] + a - D[n])
Y[n,2] <- r3(Y[n,1],a, D[n])
}
return (Y)
}
simulation_traj3 = list()
for (n in 1:10000) {
simulation_traj3[[n]] = trajectoire_gain3(x0,N)[,2]
}
J3 = function(x0,N) {
somme_gain = 0
x = c()
for (i in 1:10000) {
X = simulation_traj3[[i]]
for (n in 1:N) {
gain = sum(X)
x[i] = gain
}
somme_gain = somme_gain + gain
}
return (list(g=somme_gain/10000,r=x))
}
gain3 = J3(x0,N)$g
R3 = J3(x0,N)$r
gain_min3 = gain3 + 1.96*sqrt(var(R3)/10000)
gain_max3 = gain3 - 1.96*sqrt(var(R3)/10000)
f4 = function(x) {
if (x<=3){
return (M-x)
}
else {
return (0)
}
}
trajectoire4 = function(x0,N) {
X = numeric(N+1)
X[1] <- x0
D <- rpois(N,3)
for(n in 1:N){
a <- f4(X[n])
X[n+1] = max(0, X[n] + a - D[n])
}
return (X)
}
traj1_4 = trajectoire4(x0,N)
traj2_4 = trajectoire4(x0,N)
traj3_4 = trajectoire4(x0,N)
traj4_4 = trajectoire4(x0,N)
x = seq(1,N+1, by=1)
plot(x, traj1_4, col = "red", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj1_4, pch =16)
plot(x, traj2_4, col = "blue", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj2_4, pch =16)
plot(x, traj3_4, col = "green", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj3_4, pch =16)
plot(x, traj4_4, col = "magenta", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj4_4, pch =16)
r4 <- function(x, a, D) {
return (-alpha*a - gamma*max(0, D-x-a))
}
trajectoire_gain4 <- function(x0,N) {
Y <- matrix(c(0,0),nrow=N+1, ncol=2)
Y[1,] <- c(x0,0)
D = rpois(N,3)
for(n in 1:N) {
a <- f4(Y[n])
Y[n+1,1] <- max(0,Y[n] + a - D[n])
Y[n,2] <- r4(Y[n,1],a, D[n])
}
return (Y)
}
r4 <- function(x, a, D) {
return (-alpha*a - gamma*max(0, D-x-a))
}
trajectoire_gain4 <- function(x0,N) {
Y <- matrix(c(0,0),nrow=N+1, ncol=2)
Y[1,] <- c(x0,0)
D = rpois(N,3)
for(n in 1:N) {
a <- f4(Y[n])
Y[n+1,1] <- max(0,Y[n] + a - D[n])
Y[n,2] <- r4(Y[n,1],a, D[n])
}
return (Y)
}
simulation_traj4 = list()
for (n in 1:10000) {
simulation_traj4[[n]] = trajectoire_gain4(x0,N)[,2]
}
J3 = function(x0,N) {
somme_gain = 0
x = c()
for (i in 1:10000) {
X = simulation_traj4[[i]]
for (n in 1:N) {
gain = sum(X)
x[i] = gain
}
somme_gain = somme_gain + gain
}
return (list(g=somme_gain/10000,r=x))
}
gain4 = J4(x0,N)$g
simulation_traj4 = list()
for (n in 1:10000) {
simulation_traj4[[n]] = trajectoire_gain4(x0,N)[,2]
}
J4 = function(x0,N) {
somme_gain = 0
x = c()
for (i in 1:10000) {
X = simulation_traj4[[i]]
for (n in 1:N) {
gain = sum(X)
x[i] = gain
}
somme_gain = somme_gain + gain
}
return (list(g=somme_gain/10000,r=x))
}
gain4 = J4(x0,N)$g
R4 = J4(x0,N)$r
gain_min4 = gain4 + 1.96*sqrt(var(R4)/10000)
gain_max4 = gain4 - 1.96*sqrt(var(R4)/10000)
N <- 20
M <- 9
x0 <- 9
D <- rpois(N,3)
alpha <- 0
gamma <- 2
f1 <- function (x) {
a <- M - x
return(a)
}
trajectoire <- function(x0,N) {
X <- numeric(N+1)
X[1] <- x0
for(n in 1:N){
D <- rpois(N,3)
a <- f1(X[n])
X[n+1] <- max(0,M-D[n])
}
return (X)
}
t1 <- trajectoire(x0,N)
t2 <- trajectoire(x0,N)
t3 <- trajectoire(x0,N)
t4 <- trajectoire(x0,N)
x <- seq(1, N+1, by=1)
x = seq(1,N+1, by=1)
plot(x, t1, col = "red", lwd=2, type="l", main="Trajectoire simulée de la politique 1")
points(t1, pch =16)
plot(x, t2, col = "blue", lwd=2, type="l", main="Trajectoire simulée de la politique 1")
points(t2, pch =16)
plot(x, t3, col = "green", lwd=2, type="l", main="Trajectoire simulée de la politique 1")
points(t3, pch =16)
plot(x, t4, col = 'magenta',lwd=2, type="l", main = 'Trajectoire 4 simulée pour la politique 1')
points(t4, pch =16)
r <- function(x, a) {
D <- rpois(N,3)
return (-alpha*a - gamma*max(0, D-x-a))
}
trajectoire_gain <- function(x0,N) {
Y <- matrix(c(0,0),nrow=N+1, ncol=2)
Y[1,] <- c(x0,0)
for(n in 1:N) {
D = rpois(N,3)
a <- f1(Y[n])
Y[n+1,1] <- max(0,M-D[n])
Y[n,2] <- r(Y[n,1],a)
}
return (Y)
}
simulation_traj = list()
for (n in 1:10000) {
simulation_traj[[n]] = trajectoire_gain(x0,N)[,2]
}
J1 = function(x0,N) {
somme_gain = 0
x = c()
for (i in 1:10000) {
X = simulation_traj[[i]]
for (n in 1:N) {
gain = sum(X)
x[i] = gain
}
somme_gain = somme_gain + gain
}
return (list(g=somme_gain/10000,r=x))
}
gain1 = J1(x0,N)$g
R = J1(x0,N)$r
gain_min1 = gain1 + 1.96*sqrt(var(R)/10000)
gain_max1 = gain1 - 1.96*sqrt(var(R)/10000)
f2 = function(x) {
if (x==0){
return (M)
}
else {
return (0)
}
}
trajectoire2 = function(x0,N) {
X = numeric(N+1)
X[1] <- x0
D <- rpois(N,3)
for(n in 1:N){
a <- f2(X[n])
X[n+1] = max(0, X[n] + a - D[n])
}
return (X)
}
traj1_2 = trajectoire2(x0,N)
traj2_2 = trajectoire2(x0,N)
traj3_2 = trajectoire2(x0,N)
traj4_2 = trajectoire2(x0,N)
x = seq(1,N+1, by=1)
plot(x, traj1_2, col = "red", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj1_2, pch =16)
plot(x, traj2_2, col = "blue", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj2_2, pch =16)
plot(x, traj3_2, col = "green", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj3_2, pch =16)
plot(x, traj4_2, col = "magenta", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj4_2, pch =16)
r2 <- function(x, a, D) {
return (-alpha*a - gamma*max(0, D-x-a))
}
trajectoire_gain2 <- function(x0,N) {
Y <- matrix(c(0,0),nrow=N+1, ncol=2)
Y[1,] <- c(x0,0)
D = rpois(N,3)
for(n in 1:N) {
a <- f2(Y[n])
Y[n+1,1] <- max(0,Y[n] + a - D[n])
Y[n,2] <- r2(Y[n,1],a, D[n])
}
return (Y)
}
simulation_traj2 = list()
for (n in 1:10000) {
simulation_traj2[[n]] = trajectoire_gain2(x0,N)[,2]
}
J2 = function(x0,N) {
somme_gain = 0
x = c()
for (i in 1:10000) {
X = simulation_traj2[[i]]
for (n in 1:N) {
gain = sum(X)
x[i] = gain
}
somme_gain = somme_gain + gain
}
return (list(g=somme_gain/10000,r=x))
}
gain2 = J2(x0,N)$g
R2 = J2(x0,N)$r
gain_min2 = gain2 + 1.96*sqrt(var(R2)/10000)
gain_max2 = gain2 - 1.96*sqrt(var(R2)/10000)
f3 = function(x) {
if (x<M){
return (1)
}
else {
return (0)
}
}
trajectoire3 = function(x0,N) {
X = numeric(N+1)
X[1] <- x0
D <- rpois(N,3)
for(n in 1:N){
a <- f3(X[n])
X[n+1] = max(0, X[n] + a - D[n])
}
return (X)
}
traj1_3 = trajectoire3(x0,N)
traj2_3 = trajectoire3(x0,N)
traj3_3 = trajectoire3(x0,N)
traj4_3 = trajectoire3(x0,N)
x = seq(1,N+1, by=1)
plot(x, traj1_3, col = "red", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj1_3, pch =16)
plot(x, traj2_3, col = "blue", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj2_3, pch =16)
plot(x, traj3_3, col = "green", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj3_3, pch =16)
plot(x, traj4_3, col = "magenta", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj4_3, pch =16)
simulation_traj3 = list()
for (n in 1:10000) {
simulation_traj3[[n]] = trajectoire_gain3(x0,N)[,2]
}
J3 = function(x0,N) {
somme_gain = 0
x = c()
for (i in 1:10000) {
X = simulation_traj3[[i]]
for (n in 1:N) {
gain = sum(X)
x[i] = gain
}
somme_gain = somme_gain + gain
}
return (list(g=somme_gain/10000,r=x))
}
gain3 = J3(x0,N)$g
R3 = J3(x0,N)$r
gain_min3 = gain3 + 1.96*sqrt(var(R3)/10000)
gain_max3 = gain3 - 1.96*sqrt(var(R3)/10000)
f4 = function(x) {
if (x<=3){
return (M-x)
}
else {
return (0)
}
}
trajectoire4 = function(x0,N) {
X = numeric(N+1)
X[1] <- x0
D <- rpois(N,3)
for(n in 1:N){
a <- f4(X[n])
X[n+1] = max(0, X[n] + a - D[n])
}
return (X)
}
traj1_4 = trajectoire4(x0,N)
traj2_4 = trajectoire4(x0,N)
traj3_4 = trajectoire4(x0,N)
traj4_4 = trajectoire4(x0,N)
x = seq(1,N+1, by=1)
plot(x, traj1_4, col = "red", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj1_4, pch =16)
plot(x, traj2_4, col = "blue", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj2_4, pch =16)
plot(x, traj3_4, col = "green", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj3_4, pch =16)
plot(x, traj4_4, col = "magenta", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj4_4, pch =16)
f4 = function(x) {
if (x<=3){
return (M-x)
}
else {
return (0)
}
}
trajectoire4 = function(x0,N) {
X = numeric(N+1)
X[1] <- x0
D <- rpois(N,3)
for(n in 1:N){
a <- f4(X[n])
X[n+1] = max(0, X[n] + a - D[n])
}
return (X)
}
traj1_4 = trajectoire4(x0,N)
traj2_4 = trajectoire4(x0,N)
traj3_4 = trajectoire4(x0,N)
traj4_4 = trajectoire4(x0,N)
x = seq(1,N+1, by=1)
plot(x, traj1_4, col = "red", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj1_4, pch =16)
plot(x, traj2_4, col = "blue", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj2_4, pch =16)
plot(x, traj3_4, col = "green", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj3_4, pch =16)
plot(x, traj4_4, col = "magenta", lwd=2, type="l", main="Trajectoire simulée de la politique 2")
points(traj4_4, pch =16)
r4 <- function(x, a, D) {
return (-alpha*a - gamma*max(0, D-x-a))
}
trajectoire_gain4 <- function(x0,N) {
Y <- matrix(c(0,0),nrow=N+1, ncol=2)
Y[1,] <- c(x0,0)
D = rpois(N,3)
for(n in 1:N) {
a <- f4(Y[n])
Y[n+1,1] <- max(0,Y[n] + a - D[n])
Y[n,2] <- r4(Y[n,1],a, D[n])
}
return (Y)
}
r4 <- function(x, a, D) {
return (-alpha*a - gamma*max(0, D-x-a))
}
trajectoire_gain4 <- function(x0,N) {
Y <- matrix(c(0,0),nrow=N+1, ncol=2)
Y[1,] <- c(x0,0)
D = rpois(N,3)
for(n in 1:N) {
a <- f4(Y[n])
Y[n+1,1] <- max(0,Y[n] + a - D[n])
Y[n,2] <- r4(Y[n,1],a, D[n])
}
return (Y)
}
simulation_traj4 = list()
for (n in 1:10000) {
simulation_traj4[[n]] = trajectoire_gain4(x0,N)[,2]
}
J4 = function(x0,N) {
somme_gain = 0
x = c()
for (i in 1:10000) {
X = simulation_traj4[[i]]
for (n in 1:N) {
gain = sum(X)
x[i] = gain
}
somme_gain = somme_gain + gain
}
return (list(g=somme_gain/10000,r=x))
}
gain4 = J4(x0,N)$g
R4 = J4(x0,N)$r
gain_min4 = gain4 + 1.96*sqrt(var(R4)/10000)
gain_max4 = gain4 - 1.96*sqrt(var(R4)/10000)
f1 <- function (x) {
a <- M - x
return(a)
}
trajectoire <- function(x0,N) {
X <- numeric(N+1)
X[1] <- x0
D <- rpois(N,3)
for(n in 1:N){
D <- rpois(N,3)
a <- f1(X[n])
X[n+1] <- max(0,M-D[n])
}
return (X)
}
N <- 20
M <- 9
x0 <- 9
D <- rpois(N,3)
alpha <- 0
gamma <- 2
setwd("~/Desktop/Takuzu")
install.packages("bslib")
library(shiny); runApp('app_shiny.R')
