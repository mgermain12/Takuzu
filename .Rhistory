runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
grille_facile <- grille
grille_facile[case_facile] <- ""
grille_moyen <- grille
grille_moyen[case_moyen] <- ""
grille_difficile <- grille
grille_difficile[case_difficile] <- ""
# Sauvegarder le data frame sans les noms de lignes et de colonnes
write.table(grille_facile, file = "grille_facile.csv", row.names =FALSE, col.names = FALSE, sep=",")
View(grille_moyen)
grille <- read.csv("grille1_takuzu.csv", header = FALSE)
grille <- as.matrix(grille)
case_facile <- sample(length(grille), 20)
case_moyen <- sample(length(grille), 40)
case_difficile <- sample(length(grille), 50)
grille_facile <- grille
grille_facile[case_facile] <- ""
grille_moyen <- grille
grille_moyen[case_moyen] <- ""
grille_difficile <- grille
grille_difficile[case_difficile] <- ""
# Sauvegarder le data frame sans les noms de lignes et de colonnes
write.table(grille_facile, file = "grille_facile.csv", row.names =FALSE, col.names = FALSE, sep=",")
ui <- page_fillable(
title = "Le Fou Takuzu",
sidebar = NULL,
fillable = TRUE,
card(
h1("Bienvenue sur Le Fou Takuzu !"),
p("Choisissez un niveau pour commencer."),
navset_card_pill(
id = "niveau",
nav_panel("Facile", tableOutput("grille_facile"), value= "Facile", icon = NULL),
nav_panel("Moyen", tableOutput("grille_moyen"), value= "Moyen", icon = NULL),
nav_panel("Difficile",tableOutput("grille_difficile"), value= "Difficile", icon = NULL)
)
)
)
server <- function(input, output, session) {
output$grille_facile <- renderTable({
if (input$niveau == "Facile"){grille_facile}
else if (input$niveau == "Moyen") {grille_moyen}
else {grille_difficile}},colnames = FALSE)
observeEvent(input$Facile, {
output$grille_facile <- renderTable({ grille_facile })
})
observeEvent(input$Moyen, {
output$grille_moyen <- renderTable({ grille_moyen })
})
observeEvent(input$Difficile, {
output$grille_difficile <- renderTable({ grille_difficile })
})
}
shinyApp(ui, server)
View(grille_moyen)
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
runApp('app_shiny.R')
# Lancer l'application
shinyApp(ui, server)
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
library(shiny); runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
grille2 <- matrix(c(1,0,0,1,1,0,1,0,
0,1,1,0,1,0,0,1,
0,1,1,0,0,1,0,1,
1,0,0,1,1,0,0,1,
1,0,0,1,1,0,0,1,
0,1,1,0,1,0,1,0,
1,0,1,0,0,1,1,0,
0,1,0,1,0,1,0,1),nrow = 8, ncol=8)
grille3 <- matrix(c(1,0,1,0,1,0,1,0,
0,1,0,1,0,1,0,1,
0,0,1,1,0,0,1,1,
1,1,0,0,1,1,0,0,
0,1,1,0,1,0,0,1,
0,0,1,1,0,1,1,0,
1,1,0,0,1,0,0,1,
1,0,0,1,0,1,1,0),nrow = 8, ncol=8)
grille2 <- matrix(c(1,0,0,1,0,1,1,0,
1,1,0,0,1,0,0,1,
0,0,1,1,0,1,1,0,
0,1,1,0,1,0,0,1,
1,1,0,0,1,1,0,0,
0,0,1,1,0,0,1,1,
0,1,0,1,0,1,0,1,
1,0,1,0,1,0,1,0),nrow = 8, ncol=8)
grille1 <- matrix(c(0,0,1,1,0,1,0,1,
0,1,0,1,1,0,1,0,
1,1,0,0,1,0,0,1,
1,0,1,1,0,1,0,0,
0,1,0,0,1,0,1,1,
1,1,0,1,0,1,0,0,
0,0,1,0,1,0,1,1,
1,0,1,0,0,1,1,0),nrow = 8, ncol=8)
grille2 <- matrix(c(1,0,0,1,1,0,1,0,
0,1,1,0,1,0,0,1,
0,1,1,0,0,1,0,1,
1,0,0,1,1,0,0,1,
1,0,0,1,1,0,0,1,
0,1,1,0,1,0,1,0,
1,0,1,0,0,1,1,0,
0,1,0,1,0,1,0,1),nrow = 8, ncol=8)
grille3 <- matrix(c(1,0,1,0,1,0,1,0,
0,1,0,1,0,1,0,1,
0,0,1,1,0,0,1,1,
1,1,0,0,1,1,0,0,
0,1,1,0,1,0,0,1,
0,0,1,1,0,1,1,0,
1,1,0,0,1,0,0,1,
1,0,0,1,0,1,1,0),nrow = 8, ncol=8)
grille2 <- matrix(c(1,0,0,1,0,1,1,0,
1,1,0,0,1,0,0,1,
0,0,1,1,0,1,1,0,
0,1,1,0,1,0,0,1,
1,1,0,0,1,1,0,0,
0,0,1,1,0,0,1,1,
0,1,0,1,0,1,0,1,
1,0,1,0,1,0,1,0),nrow = 8, ncol=8)
grille1 <- matrix(c(0,0,1,1,0,1,0,1,
0,1,0,1,1,0,1,0,
1,1,0,0,1,0,0,1,
1,0,1,1,0,1,0,0,
0,1,0,0,1,0,1,1,
1,1,0,1,0,1,0,0,
0,0,1,0,1,0,1,1,
1,0,1,0,0,1,1,0),nrow = 8, ncol=8)
grille2 <- matrix(c(1,0,0,1,1,0,1,0,
0,1,1,0,1,0,0,1,
0,1,1,0,0,1,0,1,
1,0,0,1,1,0,0,1,
1,0,0,1,1,0,0,1,
0,1,1,0,1,0,1,0,
1,0,1,0,0,1,1,0,
0,1,0,1,0,1,0,1),nrow = 8, ncol=8)
grille3 <- matrix(c(1,0,1,0,1,0,1,0,
0,1,0,1,0,1,0,1,
0,0,1,1,0,0,1,1,
1,1,0,0,1,1,0,0,
0,1,1,0,1,0,0,1,
0,0,1,1,0,1,1,0,
1,1,0,0,1,0,0,1,
1,0,0,1,0,1,1,0),nrow = 8, ncol=8)
grille4 <- matrix(c(1,0,0,1,0,1,1,0,
1,1,0,0,1,0,0,1,
0,0,1,1,0,1,1,0,
0,1,1,0,1,0,0,1,
1,1,0,0,1,1,0,0,
0,0,1,1,0,0,1,1,
0,1,0,1,0,1,0,1,
1,0,1,0,1,0,1,0),nrow = 8, ncol=8)
write.csv(grille1, file = "grille1_takuzu.csv")
write.csv(grille2, file = "grille2_takuzu.csv")
write.csv(grille3, file = "grille3_takuzu.csv")
write.csv(grille4, file = "grille4_takuzu.csv")
runApp('test.R')
write.csv(grille3, file = "grille3_takuzu.csv")
write.csv(grille4, file = "grille4_takuzu.csv")
runApp('test.R')
runApp('test.R')
runApp('supp.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('supp.R')
runApp('supp.R')
runApp('supp.R')
runApp('supp.R')
runApp('supp.R')
runApp('supp.R')
runApp('test.R')
runApp('test.R')
library(shiny); runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
parametres = list(ma=c(-0.5,-0.36),ar=c(-0.8))
Xt = arima.sim(model=parametres7,n=1000, rand.gen=rnorm)
parametres = list(ma=c(-0.5,-0.36),ar=c(-0.8))
Xt = arima.sim(model=parametres,n=1000, rand.gen=rnorm)
plot.ts(Xt)
parametres = list(ma=c(-0.5,-0.36),ar=c(-0.8))
set.seed(1234)
Xt = arima.sim(model=parametres,n=1000, rand.gen=rnorm)
plot.ts(Xt)
parametres = list(ma=c(-0.5,-0.36),ar=c(-0.8))
set.seed(1234)
Xt = arima.sim(model=parametres,n=1000, rand.gen=rnorm)
plot.ts(Xt)
parametres = list(ar=c(-0.5,-0.36),ma=c(-0.8))
set.seed(1234)
Xt = arima.sim(model=parametres,n=1000, rand.gen=rnorm)
plot.ts(Xt)
parametres = list(ar=c(-0.5,-0.36),ma=c(-0.8))
set.seed(1234)
Xt = arima.sim(model=parametres,n=1000, rand.gen=rnorm)
plot.ts(Xt)
acf(Xt,type="correlation", Lag.max=20, main="autocorrélation empirique")
acf(Xt,type="correlation", Lag.max=20, main="autocorrélation empirique")
par(mfrow=c(1,2))
plot(0:20,rho_theo,col=1,type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[X](h)))
par(mfrow=c(1,2))
#plot(0:20,rho_theo,col=1,type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[X](h)))
par(mfrow=c(1,2))
#plot(0:20,rho_theo,col=1,type='h',main="autocorrélation théorique",xlab='h',
#ylab=expression(rho[X](h)))
abline(h=0)
acf(Xt,type="correlation", Lag.max=20, main="autocorrélation empirique")
par(mfrow=c(1,2))
acf(Xt,type="correlation", Lag.max=20, main="autocorrélation empirique")
pacf(Xt,type="correlation", Lag.max=20, main="autocorrélation empirique")
par(mfrow=c(1,2))
acf(Xt,type="correlation", main="autocorrélation empirique")
pacf(Xt,type="correlation", main="autocorrélation empirique")
parametres = list(ar=c(-0.5,-0.36),ma=c(-0.8))
set.seed(1234)
Xt = arima.sim(model=parametres,n=1000, rand.gen=rnorm)
plot.ts(Xt)
par(mfrow=c(1,2))
acf(Xt,type="correlation", main="autocorrélation empirique")
pacf(Xt,type="correlation", main="autocorrélation empirique")
par(mfrow=c(1,2))
acf(Xt,type="correlation", main="autocorrélation empirique")
pacf(Xt, main="autocorrélation empirique")
par(mfrow=c(1,2))
acf(Xt,type="correlation", main="autocorrélation empirique")
acf(Xt,type="partial", main="autocorrélation empirique")
parametres = list(ar=c(0.5,0.36),ma=c(-0.8))
set.seed(1234)
Xt = arima.sim(model=parametres,n=1000, rand.gen=rnorm)
plot.ts(Xt)
par(mfrow=c(1,2))
acf(Xt,type="correlation", main="autocorrélation empirique")
acf(Xt,type="partial", main="autocorrélation empirique")
par(mfrow=c(1,2))
acf(Xt,type="correlation", main="autocorrélation empirique")
acf(Xt,type="partial", main="autocorrélation partielle")
arima(Xt, order=c(2,0,1),method="ML") = fit1
arima(Xt, order=c(2,0,1),method="ML") -> fit1
fit1
arima(Xt, order=c(2,0,1),method="CSS") -> fit2
fit2
arima(Xt, order=c(2,0,1),method="CSS-ML") -> fit3
fit3
arima(Xt, order=c(2,0,1),method="CSS") -> fit1
fit1
arima(Xt, order=c(2,0,1),method="ML") -> fit2
fit2
arima(Xt, order=c(2,0,1),method="CSS-ML") -> fit3
fit3
fit1$residuals
acf(fit1$residuals, type="correlation", main="autocorrélation empirique")
acf(fit1$residuals,type="partial", main="autocorrélation partielle")
par(mfrow=c(1,2))
acf(fit1$residuals, type="correlation", main="autocorrélation empirique")
acf(fit1$residuals,type="partial", main="autocorrélation partielle")
arima(Xt, order=c(1,0,1),method="ML") -> fit4 #ARMA(1,1)
fit4
arima(Xt, order=c(1,0,2),method="ML") -> fit5 #ARMA(1,2)
fit5
arima(Xt, order=c(2,0,2),method="ML") -> fit6 #ARMA(2,2)
fit6
arima(Xt, order=c(1,0,0),method="ML") -> fit7 #AR(1)
fit7
arima(Xt, order=c(2,0,0),method="ML") -> fit8 #AR(2)
fit8
arima(Xt, order=c(0,0,1),method="ML") -> fit9 #MA(1)
fit9
arima(Xt, order=c(0,0,2),method="ML") -> fit10 #MA(2)
fit10
arima(Xt, order=c(1,0,1),method="ML") -> fit4 #ARMA(1,1)
fit4
arima(Xt, order=c(1,0,2),method="ML") -> fit5 #ARMA(1,2)
fit5
arima(Xt, order=c(2,0,2),method="ML") -> fit6 #ARMA(2,2)
fit6
arima(Xt, order=c(1,0,0),method="ML") -> fit7 #AR(1)
fit7
arima(Xt, order=c(2,0,0),method="ML") -> fit8 #AR(2)
fit8
arima(Xt, order=c(0,0,1),method="ML") -> fit9 #MA(1)
fit9
arima(Xt, order=c(0,0,2),method="ML") -> fit10 #MA(2)
fit10
arima(Xt, order=c(1,0,1),method="ML") #ARMA(1,1)
BIC(arima(Xt, order=c(1,0,1),method="ML"))
arima(Xt, order=c(1,0,2),method="ML") #ARMA(1,2)
BIC(arima(Xt, order=c(1,0,2),method="ML"))
arima(Xt, order=c(2,0,2),method="ML") #ARMA(2,2)
BIC(arima(Xt, order=c(2,0,2),method="ML"))
arima(Xt, order=c(1,0,0),method="ML") #AR(1)
BIC(arima(Xt, order=c(1,0,0),method="ML"))
arima(Xt, order=c(2,0,0),method="ML") #AR(2)
bic(arima(Xt, order=c(2,0,0),method="ML"))
arima(Xt, order=c(1,0,1),method="ML") #ARMA(1,1)
BIC(arima(Xt, order=c(1,0,1),method="ML"))
arima(Xt, order=c(1,0,2),method="ML") #ARMA(1,2)
BIC(arima(Xt, order=c(1,0,2),method="ML"))
arima(Xt, order=c(2,0,2),method="ML") #ARMA(2,2)
BIC(arima(Xt, order=c(2,0,2),method="ML"))
arima(Xt, order=c(1,0,0),method="ML") #AR(1)
BIC(arima(Xt, order=c(1,0,0),method="ML"))
arima(Xt, order=c(2,0,0),method="ML") #AR(2)
BIC(arima(Xt, order=c(2,0,0),method="ML"))
arima(Xt, order=c(0,0,1),method="ML") #MA(1)
BIC(arima(Xt, order=c(0,0,1),method="ML"))
arima(Xt, order=c(0,0,2),method="ML") #MA(2)
BIC(arima(Xt, order=c(0,0,2),method="ML"))
arima(Xt, order=c(1,0,1),method="ML") #ARMA(1,1)
BIC(arima(Xt, order=c(1,0,1),method="ML"))
arima(Xt, order=c(1,0,2),method="ML") #ARMA(1,2)
BIC(arima(Xt, order=c(1,0,2),method="ML"))
arima(Xt, order=c(2,0,2),method="ML") #ARMA(2,2)
BIC(arima(Xt, order=c(2,0,2),method="ML"))
arima(Xt, order=c(1,0,0),method="ML") #AR(1)
BIC(arima(Xt, order=c(1,0,0),method="ML"))
arima(Xt, order=c(2,0,0),method="ML") #AR(2)
BIC
(arima(Xt, order=c(2,0,0),method="ML"))
arima(Xt, order=c(0,0,1),method="ML") #MA(1)
BIC(arima(Xt, order=c(0,0,1),method="ML"))
arima(Xt, order=c(0,0,2),method="ML") #MA(2)
BIC(arima(Xt, order=c(0,0,2),method="ML"))
install.packages("forecast")
library(forecast)
auto.arima(Xt, max.p=2,max.q=2,d=0,seasonal=FALSE)
library(forecast)
auto.arima(Xt, max.p=2,max.q=2,d=0,seasonal=FALSE)
AICarima(Xt, order=c(1,0,1),method="ML")) #ARMA(1,1)
AIC(arima(Xt, order=c(1,0,1),method="ML")) #ARMA(1,1)
BIC(arima(Xt, order=c(1,0,1),method="ML"))
AIC(arima(Xt, order=c(1,0,2),method="ML")) #ARMA(1,2)
BIC(arima(Xt, order=c(1,0,2),method="ML"))
AIC(arima(Xt, order=c(2,0,2),method="ML")) #ARMA(2,2)
BIC(arima(Xt, order=c(2,0,2),method="ML"))
AIC(arima(Xt, order=c(1,0,0),method="ML")) #AR(1)
BIC(arima(Xt, order=c(1,0,0),method="ML"))
AIC(arima(Xt, order=c(2,0,0),method="ML")) #AR(2)
BIC(arima(Xt, order=c(2,0,0),method="ML"))
AIC(arima(Xt, order=c(0,0,1),method="ML")) #MA(1)
BIC(arima(Xt, order=c(0,0,1),method="ML"))
AIC(arima(Xt, order=c(0,0,2),method="ML")) #MA(2)
BIC(arima(Xt, order=c(0,0,2),method="ML"))
install.packages
install.packages("stats")
library(stats)
Box.test(fit1$residuals, lag=15)
library(stats)
Box.test(fit1$residuals, lag=15)
library(stats)
Box.test(fit1$residuals, lag=15)
library(shiny); runApp('app_shiny.R')
runApp('test.R')
install.packages("devtools")
library(devtools)
library(devtools)
create_package("Takuzu")
